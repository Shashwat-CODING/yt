name: Test Proxies

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:        # Allow manual triggering

# Add explicit permissions to allow pushing to the repository
permissions:
  contents: write

jobs:
  test-proxies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Test proxies
        run: |
          python - << EOF
          import json
          import requests
          import concurrent.futures
          import time
          
          def test_proxy(proxy):
              try:
                  # Define a timeout to avoid hanging
                  proxies = {
                      "http": f"http://{proxy}",
                      "https": f"http://{proxy}"
                  }
                  
                  # Use a test URL (example.com is a neutral test site)
                  response = requests.get("http://example.com", 
                                          proxies=proxies, 
                                          timeout=10)
                  
                  # Consider it working if we get a 200 response
                  if response.status_code == 200:
                      print(f"Proxy {proxy} is working")
                      return proxy
                  else:
                      print(f"Proxy {proxy} returned status code {response.status_code}")
                      return None
              except Exception as e:
                  print(f"Proxy {proxy} failed: {str(e)}")
                  return None
          
          # Fetch the proxy list
          try:
              response = requests.get("https://raw.githubusercontent.com/Shashwat-CODING/yt/refs/heads/main/proxy.json")
              data = response.json()
              proxy_list = data.get("proxies", [])
              print(f"Found {len(proxy_list)} proxies to test")
          except Exception as e:
              print(f"Error fetching proxy list: {str(e)}")
              proxy_list = []
          
          # Test all proxies in parallel
          working_proxies = []
          with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
              future_to_proxy = {executor.submit(test_proxy, proxy): proxy for proxy in proxy_list}
              for future in concurrent.futures.as_completed(future_to_proxy):
                  result = future.result()
                  if result:
                      working_proxies.append(result)
          
          # Save working proxies to wpr.json
          working_data = {"proxies": working_proxies}
          with open("wpr.json", "w") as f:
              json.dump(working_data, f, indent=2)
          
          print(f"Found {len(working_proxies)} working proxies out of {len(proxy_list)}")
          EOF
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add wpr.json
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update working proxies list" && git push)
